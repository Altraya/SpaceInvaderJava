/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package spaceinvadersproject.GUI;

import java.awt.Color;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import javax.swing.JComponent;
import spaceinvadersproject.Models.Enemies.Enemy;
import spaceinvadersproject.Models.Player.Player;
import spaceinvadersproject.SpaceInvaderGame;
import spaceinvadersproject.SpaceInvaderGame.ECote;

/**
 * Repr√©sente the screen of the game
 * @author Karakayn
 */
public class GameScreenPanel extends javax.swing.JPanel {
    private static Frame f;
    
    /**
     * Creates new form GameScreen
     */
    public GameScreenPanel(Frame frame) {
        f = frame;
        initComponents();
        SpaceInvaderGame.getInstance().initGame();
        this.setBackground(Color.BLACK);
        this.setFocusable(true);
        this.requestFocusInWindow();

    }
    
    public void updateScreenDimensionOnGame()
    {
        SpaceInvaderGame.getInstance().setMaxScreenHeight(this.getSize().height);
        SpaceInvaderGame.getInstance().setMaxScreenWidth(this.getSize().width);
    }
    
    public void initAircraftPosition()
    {
        SpaceInvaderGame.getInstance().getPlayer().getAircraft().setX(this.getSize().width/2);
        SpaceInvaderGame.getInstance().getPlayer().getAircraft().setY(this.getSize().height-130);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        updateScreenDimensionOnGame();
        initAircraftPosition();
    }//GEN-LAST:event_formComponentResized

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        System.out.println("Key pressed");
        switch(evt.getKeyCode())
        {
            case KeyEvent.VK_LEFT:
                SpaceInvaderGame.getInstance().getPlayer().getAircraft().move(ECote.LEFT, 1);
          
                break;
            case KeyEvent.VK_RIGHT:
                SpaceInvaderGame.getInstance().getPlayer().getAircraft().move(ECote.RIGHT, 1);                
                break;
        }
        this.repaint();
    }//GEN-LAST:event_formKeyPressed

    /**
     * Draw a line in specified color on the canvas (it's the line of the ground)
     * @param g : canvas
     */
    private void drawBaseGround(Graphics g, Color color)
    {
        Graphics2D g2d = (Graphics2D) g;
        g2d.setColor(color);
        g2d.fillRect(0, this.getSize().height-60, this.getSize().width, 2);
    }
    
    /**
     * Draw an enemy to the specified canvas
     * @param g : canvas
     * @param enemy : enemy to draw
     */
    private void drawEnemy(Graphics g, Enemy enemy)
    {        
        g.drawImage(enemy.getAircraft().getPicture(), enemy.getAircraft().getX(), enemy.getAircraft().getY(), this);
    }
    
    /**
     * Draw enemies in the specified canvas
     * @param g : canvas
     * @param enemies : enemies to draw
     */
    private void drawEnemies(Graphics g, ArrayList<Enemy> enemies)
    {
        for (Enemy next : enemies) {
            //draw current ennemy
            drawEnemy(g, next);
        }
    }
    
    /**
     * Draw player in the specified canvas
     * @param g : canvas
     * @param player : player to draw
     */
    private void drawPlayer(Graphics g, Player player)
    {
        g.drawImage(player.getAircraft().getPicture(), player.getAircraft().getX(), player.getAircraft().getY(), this);
    }
    
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        //draw the ground
        drawBaseGround(g, Color.white);
        
        if(SpaceInvaderGame.getInstance().getEnemies() != null)
        {
            //draw enemies
            drawEnemies(g, SpaceInvaderGame.getInstance().getEnemies());
        }

        if(SpaceInvaderGame.getInstance().getPlayer() != null)
        {
            System.out.println(SpaceInvaderGame.getInstance().getPlayer().getAircraft().getX());
            System.out.println(SpaceInvaderGame.getInstance().getPlayer().getAircraft().getY());
            //draw player
            drawPlayer(g, SpaceInvaderGame.getInstance().getPlayer());   
        }


    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
